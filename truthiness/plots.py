# AUTOGENERATED! DO NOT EDIT! File to edit: plots.ipynb (unless otherwise specified).

__all__ = ['plot_maze', 'plot_boards', 'plot_historgrams', 'plot_available']

# Cell
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Cell
def plot_maze(maze, plot=False, path=None, height=2, width=3, name='board.png'):
    """Plot the maze (white is the maze bounderies)"""

    # Plot!
    fig, ax = plt.subplots(figsize=(width, height))  # Sample figsize in inches
    ax = sns.heatmap(maze,
                     linewidths=3,
                     vmin=0,
                     vmax=1,
                     cbar=False,
                     cmap=["black", "white"],
                     ax=ax)

    # Save an image?
    if path is not None:
        plt.savefig(os.path.join(path, name))

    # Show?
    if plot:
        plt.pause(0.01)
    plt.close('all')

# Cell
def plot_boards(E, Q, plot=False, path=None, height=2, width=3, name='board.png', **heatmap_kwargs):
    """Plot the boards"""

    # Fix colors (overide kwargs)
    cmap = sns.diverging_palette(300, 145, s=60, as_cmap=True)

    # Plot!
    fig, ax = plt.subplots(ncols=2, figsize=(width, height))  # Sample figsize in inches
    ax[0] = sns.heatmap(E,
                     linewidths=3,
                     center=0,
                     ax=ax[0],
                     cmap=cmap,
                     cbar=False,
                     **heatmap_kwargs
                     )
    ax[1] = sns.heatmap(-Q,
                     linewidths=3,
                     center=0,
                     ax=ax[1],
                     cmap=cmap,
                     cbar=False,
                     **heatmap_kwargs
                     )

    ax[0].title.set_text('$E$')
    ax[1].title.set_text('$Q$')

    # Save an image?
    if path is not None:
        plt.savefig(os.path.join(path, name))

    # Show?
    if plot:
        plt.pause(0.01)
    plt.close('all')

# Cell
def plot_historgrams(E, Q, plot=False, path=None, height=2, width=3, name='board.png', **hist_kwargs):
    """Plot a histograms of a board's values."""

    # Set colors to match board
    green = [0.29233637, 0.51074656, 0.39061738, 1.0]
    violet = [0.66131564, 0.3363342 , 0.71648282, 1.0]

    # Plot!
    fig, ax = plt.subplots(figsize=(width, height))  # Sample figsize in inches
    plt.hist(E.flatten(), label="$E$", color=green, **hist_kwargs)
    plt.hist(Q.flatten(), label="$Q$", color=violet, **hist_kwargs)
    plt.legend()

    # Save an image?
    if path is not None:
        plt.savefig(os.path.join(path, name))

    # Show?
    if plot:
        plt.pause(0.01)
    plt.close('all')

# Cell
def plot_available(x, y, maze, available, plot=False, path=None, height=2, width=3, name='board.png'):
    """Plot available moves.

    Params
    ------
    n : int
        Board size
    x : int
        Start x position
    y : int
        Start x position
    available : list(tuple)
        List of available moves as (x, y)
    ...
    """

    # Start
    n = maze.shape[0]
    board = np.zeros((n, n))
    board[x, y] = 1

    # Moves
    for (i, j) in available:
        board[i, j] = 2

    # Plot!
    fig, ax = plt.subplots(figsize=(width, height))  # Sample figsize in inches
    ax = sns.heatmap(board,
                     linewidths=3,
                     cbar=False,
                     cmap=["black", "yellow", "red"],
                     ax=ax,
                     mask=maze)

    # Save an image?
    if path is not None:
        plt.savefig(os.path.join(path, name))

    # Show?
    if plot:
        plt.pause(0.01)
    plt.close('all')